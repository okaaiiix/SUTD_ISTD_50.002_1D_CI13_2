module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input customin [2],
    output customout [3]
  ) {
  
  sig rst;                  // reset signal
  full_adder fulladder;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    fulladder.x = io_dip[0][0];
    fulladder.y = io_dip[0][1];
    fulladder.cin = io_dip[0][2];
    
    customout[0] = io_dip[0][0]; // C2 == x
    customout[1] = io_dip[0][1]; // C3 == y
    customout[2] = io_dip[0][2]; // C4 == cin
    
    
    fulladder.s_check = customin[0]; // s_check == C49
    fulladder.cout_check = customin[1]; // cout_check == C48
    
    io_led[2][2] = fulladder.checker;
    io_led[2][1] = fulladder.s;
    io_led[2][0] = fulladder.cout;
  }
}