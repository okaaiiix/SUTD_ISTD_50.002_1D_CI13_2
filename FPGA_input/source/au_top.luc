module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input customin [2],
    output customout [3]
  ) {
  
  sig rst, x , y , cin, s_check, cout_check;                  // reset signal
  full_adder fulladder;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  counter slowclock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  fsm state(.clk(slowclock.value),.rst(rst)) = {STATE0,STATEM, STATE1, STATE2, STATE3, STATE4, STATE5, STATE6, STATE7};
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    /*
    fulladder.x = io_dip[0][0];
    fulladder.y = io_dip[0][1];
    fulladder.cin = io_dip[0][2];
    
    customout[0] = io_dip[0][0]; // C2 == x
    customout[1] = io_dip[0][1]; // C3 == y
    customout[2] = io_dip[0][2]; // C5 == cin
    
    fulladder.s_check = customin[0]; // s_check == C49
    fulladder.cout_check = customin[1]; // cout_check == C48
    
    io_led[0][0] = fulladder.checker; //checker LED
    io_led[1][1] = customin[0];  // Hardware S C49
    io_led[1][0] = customin[1]; // Hardware Cout
    io_led[2][1] = fulladder.s; // Software S
    io_led[2][0] = fulladder.cout; // Software Cout
    */
    
    fulladder.x = 0;
    fulladder.y = 0;
    fulladder.cin = 0;
    fulladder.s_check = 0;
    fulladder.cout_check = 0;

    s_check = customin[0];
    cout_check = customin[1];
    customout[0] = 0;
    customout[1] = 0;
    customout[2] = 0;
    

    
    case (state.q) {
      state.STATE0:
        x = 0;
        y = 0;
        cin = 0;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 0;
        io_led[2][0] = 0;
        
        if (s_check == 0 && cout_check == 0) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        if (io_dip[1][0] == 0) {
          state.d = state.STATE1;
        } else {
          state.d = state.STATEM;
        }
        
      state.STATEM:
        fulladder.x = io_dip[0][0];
        fulladder.y = io_dip[0][1];
        fulladder.cin = io_dip[0][2];
    
        customout[0] = io_dip[0][0]; // C2 == x
        customout[1] = io_dip[0][1]; // C3 == y
        customout[2] = io_dip[0][2]; // C5 == cin
    
        fulladder.s_check = customin[0]; // s_check == C49
        fulladder.cout_check = customin[1]; // cout_check == C48
    
        io_led[0][0] = fulladder.checker; //checker LED
        io_led[1][1] = customin[0];  // Hardware S C49
        io_led[1][0] = customin[1]; // Hardware Cout
        io_led[2][1] = fulladder.s; // Software S
        io_led[2][0] = fulladder.cout; // Software Cout
        
        if (io_dip[1][0] == 0) {
          state.d = state.STATE1;
        } else {
          state.d = state.STATEM;
        }
        
      state.STATE1:
        x = 0;
        y = 0;
        cin = 1;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 1;
        io_led[2][0] = 0;
        
        if (s_check == 1 && cout_check == 0) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE2;
        
      state.STATE2:
        x = 0;
        y = 1;
        cin = 0;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin; 
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 1;
        io_led[2][0] = 0;
        
        if (s_check == 1 && cout_check == 0) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE3;
        
      state.STATE3:
        x = 0;
        y = 1;
        cin = 1;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 0;
        io_led[2][0] = 1;
        
        if (s_check == 0 && cout_check == 1) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE4;
        
      state.STATE4:
        x = 1;
        y = 0;
        cin = 0;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 1;
        io_led[2][0] = 0;
        
        if (s_check == 1 && cout_check == 0) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE5;
        
      state.STATE5:
        x = 1;
        y = 0;
        cin = 1;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 0;
        io_led[2][0] = 1;
        
        if (s_check == 0 && cout_check == 1) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE6;
        
      state.STATE6:
        x = 1;
        y = 1;
        cin = 0;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 0;
        io_led[2][0] = 1;
        
        if (s_check == 0 && cout_check == 1) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE7;
        
      state.STATE7:
        x = 1;
        y = 1;
        cin = 1;
        
        io_led[0][2] = x;
        io_led[0][3] = y;
        io_led[0][4] = cin;
        
        customout[0] = x;
        customout[1] = y;
        customout[2] = cin;
        
        io_led[1][1] = s_check;
        io_led[1][0] = cout_check;
        
        io_led[2][1] = 1;
        io_led[2][0] = 1;
        
        if (s_check == 1 && cout_check == 1) {
          io_led[0][0] = 1;
        }
        else {io_led[0][0] = 0;}
        state.d = state.STATE0;
    }
  }
}