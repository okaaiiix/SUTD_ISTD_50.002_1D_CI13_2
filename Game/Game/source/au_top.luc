module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input button[4],     ///external buttons (Player 1 up, Player 2 up, Player 1 down, Player 2 down)
    input submit[2],     //(Player 1 submit, Player 2 submit)
    output p1_display[8],
    output p2_display[8],
    output p1_display_sel[1],
    output p2_display_sel[1],
   
 
  ) {
  
  sig button_press[6];                                 //button signals after conditioning and edge detection
  sig rst,a[16],b[16],alufn[6],error;                  // reset signal
  alu alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff inp_a[16];
    dff inp_b[16];
    dff counter[27];
    dff next_state;
    
    // For button, ed detects rising edges, bc conditions input.
    edge_detector ed0(#RISE(1), #FALL(0));
    button_conditioner bc0;
    edge_detector ed1(#RISE(1), #FALL(0));
    button_conditioner bc1;
    edge_detector ed2(#RISE(1), #FALL(0));
    button_conditioner bc2;
    edge_detector ed3(#RISE(1), #FALL(0));
    button_conditioner bc3;
    
    .rst(rst){
      multi_seven_seg seg;
      
    }
  }

  counter slowclock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  fsm state(.clk(slowclock.value),.rst(rst)) = {STATE_INPUT,STATEP1,}

  
  
  always {
  
    bc0.in = button[0];
    ed0.in = bc0.out;
    bc1.in = button[1];
    ed1.in = bc1.out;
    bc2.in = button[2];
    ed2.in = bc2.out;
    bc3.in = button[3];
    ed3.in = bc3.out;
    button_press = c{ed3.out, ed2.out, ed1.out, ed0.out};

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // echo the serial data
    led = 8h00;             // turn LEDs off
    
    p1_display = ~seg.seg;      // connect segments to the driver
    p2_display = ~seg.seg; 
    p1_display_sel = ~4h1;      // only last digit of array used
    p2_display_sel = ~4h1;
     
    seg.values = {4h7,4h7,4h7,4h7}; //initiate seven segment display
     
  
    a=0;
    b=0;
    alufn=0;
    alu.a = a;                        
    alu.b = b;
    alu.alufn = alufn;
    
    case (state.q) {
      state.STATE_INPUT:
      if (
      
}