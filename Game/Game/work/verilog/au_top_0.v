/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    input [3:0] button,
    input [1:0] submit,
    output reg [7:0] p1_display,
    output reg [7:0] p2_display,
    output reg [0:0] p1_display_sel,
    output reg [0:0] p2_display_sel,
    output reg [0:0] a_display,
    output reg [0:0] a_display_sel,
    output reg [0:0] b_display,
    output reg [0:0] b_display_sel,
    output reg [0:0] c_display,
    output reg [0:0] c_display_sel,
    output reg [0:0] d_display,
    output reg [0:0] d_display_sel,
    output reg [9:0] hp
  );
  
  
  
  integer ans_input1;
  
  integer ans_input2;
  
  integer correct1;
  
  integer correct2;
  
  integer [3:0] a;
  
  integer [1:0] op1;
  
  integer [3:0] b;
  
  integer [1:0] op2;
  
  integer [3:0] c;
  
  integer [3:0] d;
  
  integer [1:0] hide_index;
  
  integer [3:0] correct_answer;
  
  integer error;
  
  reg [5:0] button_press;
  
  reg rst;
  reg [15:0] alua;
  reg [15:0] alub;
  reg [5:0] alufn;
  
  reg [3:0] a_temp;
  reg [3:0] b_temp;
  reg [3:0] c_temp;
  reg [3:0] d_temp;
  reg [1:0] op1_temp;
  reg [1:0] op2_temp;
  reg [3:0] a_actl;
  reg [3:0] b_actl;
  reg [3:0] c_actl;
  reg [3:0] d_actl;
  reg [1:0] hide_temp;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_error;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .error(M_alu_error)
  );
  
  wire [1-1:0] M_modulo1_out;
  reg [1-1:0] M_modulo1_a;
  reg [1-1:0] M_modulo1_b;
  modulo1_2 modulo1 (
    .a(M_modulo1_a),
    .b(M_modulo1_b),
    .out(M_modulo1_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [32-1:0] M_random_num;
  reg [1-1:0] M_random_rst;
  reg [1-1:0] M_random_next;
  reg [32-1:0] M_random_seed;
  random_4 random (
    .clk(clk),
    .rst(M_random_rst),
    .next(M_random_next),
    .seed(M_random_seed),
    .num(M_random_num)
  );
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  reg [15:0] M_inp_a_d, M_inp_a_q = 1'h0;
  reg [15:0] M_inp_b_d, M_inp_b_q = 1'h0;
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  reg M_next_state_d, M_next_state_q = 1'h0;
  reg [4:0] M_health_a_d, M_health_a_q = 1'h0;
  reg [4:0] M_health_b_d, M_health_b_q = 1'h0;
  wire [1-1:0] M_ed0_out;
  reg [1-1:0] M_ed0_in;
  edge_detector_5 ed0 (
    .clk(clk),
    .in(M_ed0_in),
    .out(M_ed0_out)
  );
  wire [1-1:0] M_bc0_out;
  reg [1-1:0] M_bc0_in;
  button_conditioner_6 bc0 (
    .clk(clk),
    .in(M_bc0_in),
    .out(M_bc0_out)
  );
  wire [1-1:0] M_ed1_out;
  reg [1-1:0] M_ed1_in;
  edge_detector_5 ed1 (
    .clk(clk),
    .in(M_ed1_in),
    .out(M_ed1_out)
  );
  wire [1-1:0] M_bc1_out;
  reg [1-1:0] M_bc1_in;
  button_conditioner_6 bc1 (
    .clk(clk),
    .in(M_bc1_in),
    .out(M_bc1_out)
  );
  wire [1-1:0] M_ed2_out;
  reg [1-1:0] M_ed2_in;
  edge_detector_5 ed2 (
    .clk(clk),
    .in(M_ed2_in),
    .out(M_ed2_out)
  );
  wire [1-1:0] M_bc2_out;
  reg [1-1:0] M_bc2_in;
  button_conditioner_6 bc2 (
    .clk(clk),
    .in(M_bc2_in),
    .out(M_bc2_out)
  );
  wire [1-1:0] M_ed3_out;
  reg [1-1:0] M_ed3_in;
  edge_detector_5 ed3 (
    .clk(clk),
    .in(M_ed3_in),
    .out(M_ed3_out)
  );
  wire [1-1:0] M_bc3_out;
  reg [1-1:0] M_bc3_in;
  button_conditioner_6 bc3 (
    .clk(clk),
    .in(M_bc3_in),
    .out(M_bc3_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_7 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [7-1:0] M_seg2_seg;
  wire [4-1:0] M_seg2_sel;
  reg [16-1:0] M_seg2_values;
  multi_seven_seg_7 seg2 (
    .clk(clk),
    .rst(rst),
    .values(M_seg2_values),
    .seg(M_seg2_seg),
    .sel(M_seg2_sel)
  );
  wire [7-1:0] M_sega_seg;
  wire [4-1:0] M_sega_sel;
  reg [16-1:0] M_sega_values;
  multi_seven_seg_7 sega (
    .clk(clk),
    .rst(rst),
    .values(M_sega_values),
    .seg(M_sega_seg),
    .sel(M_sega_sel)
  );
  wire [7-1:0] M_segb_seg;
  wire [4-1:0] M_segb_sel;
  reg [16-1:0] M_segb_values;
  multi_seven_seg_7 segb (
    .clk(clk),
    .rst(rst),
    .values(M_segb_values),
    .seg(M_segb_seg),
    .sel(M_segb_sel)
  );
  wire [7-1:0] M_segc_seg;
  wire [4-1:0] M_segc_sel;
  reg [16-1:0] M_segc_values;
  multi_seven_seg_7 segc (
    .clk(clk),
    .rst(rst),
    .values(M_segc_values),
    .seg(M_segc_seg),
    .sel(M_segc_sel)
  );
  wire [7-1:0] M_segd_seg;
  wire [4-1:0] M_segd_sel;
  reg [16-1:0] M_segd_values;
  multi_seven_seg_7 segd (
    .clk(clk),
    .rst(rst),
    .values(M_segd_values),
    .seg(M_segd_seg),
    .sel(M_segd_sel)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_8 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam STATEINIT_state = 6'd0;
  localparam STATEINPUT_state = 6'd1;
  localparam STATEP1UP_state = 6'd2;
  localparam STATEP2UP_state = 6'd3;
  localparam STATEP1DOWN_state = 6'd4;
  localparam STATEP2DOWN_state = 6'd5;
  localparam STATEP1CORRECT_state = 6'd6;
  localparam STATEP2CORRECT_state = 6'd7;
  localparam STATEOUTPUT_state = 6'd8;
  localparam RANDA_state = 6'd9;
  localparam RANDOP1_state = 6'd10;
  localparam RANDB0_state = 6'd11;
  localparam RANDB1_state = 6'd12;
  localparam RANDB2_state = 6'd13;
  localparam RANDB3_state = 6'd14;
  localparam RANDOP20_state = 6'd15;
  localparam RANDOP21_state = 6'd16;
  localparam RANDOP22_state = 6'd17;
  localparam RANDOP23_state = 6'd18;
  localparam RANDC0_state = 6'd19;
  localparam RANDC1_state = 6'd20;
  localparam RANDC2_state = 6'd21;
  localparam RANDC3_state = 6'd22;
  localparam RANDC4_state = 6'd23;
  localparam RANDC5_state = 6'd24;
  localparam RANDC6_state = 6'd25;
  localparam RANDC7_state = 6'd26;
  localparam RANDC8_state = 6'd27;
  localparam RANDC9_state = 6'd28;
  localparam RANDCA_state = 6'd29;
  localparam RANDCB_state = 6'd30;
  localparam RANDCC_state = 6'd31;
  localparam RANDCD_state = 6'd32;
  localparam RANDCE_state = 6'd33;
  localparam RANDCF_state = 6'd34;
  localparam CALCD0_state = 6'd35;
  localparam CALCD1_state = 6'd36;
  localparam CALCD2_state = 6'd37;
  localparam CALCD3_state = 6'd38;
  localparam CALCD4_state = 6'd39;
  localparam CALCD5_state = 6'd40;
  localparam CALCD6_state = 6'd41;
  localparam CALCD7_state = 6'd42;
  localparam CALCD8_state = 6'd43;
  localparam CALCD9_state = 6'd44;
  localparam CALCDA_state = 6'd45;
  localparam CALCDB_state = 6'd46;
  localparam CALCDC_state = 6'd47;
  localparam CALCDD_state = 6'd48;
  localparam CALCDE_state = 6'd49;
  localparam CALCDF_state = 6'd50;
  localparam CHECKDOVER_state = 6'd51;
  localparam CHECKDUNDER_state = 6'd52;
  localparam RANDHIDE_state = 6'd53;
  localparam STATEC_state = 6'd54;
  localparam STATEHP_A_state = 6'd55;
  localparam STATEHP_B_state = 6'd56;
  localparam STATEQN_state = 6'd57;
  localparam STATEGAMEOVER_state = 6'd58;
  localparam STATEGAMESTART_state = 6'd59;
  
  reg [5:0] M_state_d, M_state_q = STATEINIT_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_health_b_d = M_health_b_q;
    M_health_a_d = M_health_a_q;
    
    M_bc0_in = button[0+0-:1];
    M_ed0_in = M_bc0_out;
    M_bc1_in = button[1+0-:1];
    M_ed1_in = M_bc1_out;
    M_bc2_in = button[2+0-:1];
    M_ed2_in = M_bc2_out;
    M_bc3_in = button[3+0-:1];
    M_ed3_in = M_bc3_out;
    button_press = {M_ed3_out, M_ed2_out, M_ed1_out, M_ed0_out};
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    hp[0+9-:10] = 8'h00;
    p1_display = ~M_seg_seg;
    p2_display = ~M_seg2_seg;
    a_display = ~M_sega_seg;
    b_display = ~M_segb_seg;
    c_display = ~M_segc_seg;
    d_display = ~M_segd_seg;
    p1_display_sel = 4'he;
    p2_display_sel = 4'he;
    a_display_sel = 4'he;
    b_display_sel = 4'he;
    c_display_sel = 4'he;
    d_display_sel = 4'he;
    M_seg_values = 16'h7777;
    M_seg2_values = 16'h7777;
    M_sega_values = 16'h7777;
    M_segb_values = 16'h7777;
    M_segc_values = 16'h7777;
    M_segd_values = 16'h7777;
    hp[0+4-:5] = M_health_a_q;
    hp[5+4-:5] = M_health_b_q;
    a = 1'h0;
    b = 1'h0;
    alufn = 1'h0;
    M_alu_a = a;
    M_alu_b = b;
    M_alu_alufn = alufn;
    ans_input1 = 1'h0;
    ans_input2 = 1'h0;
    correct1 = 1'h0;
    correct2 = 1'h0;
    M_random_seed = M_seed_q;
    M_random_next = 1'h0;
    M_random_rst = rst;
    M_modulo1_a = 1'h0;
    M_modulo1_b = 1'h0;
    a = 1'h0;
    a_temp = 1'h0;
    a_actl = 1'h0;
    b = 1'h0;
    b_temp = 1'h0;
    b_actl = 1'h0;
    c = 1'h0;
    c_temp = 1'h0;
    c_actl = 1'h0;
    d = 1'h0;
    d_temp = 1'h0;
    d_actl = 1'h0;
    hide_index = 2'h3;
    hide_temp = 2'h3;
    correct_answer = 1'h0;
    error = 1'h0;
    op1 = 1'h0;
    op1_temp = 1'h0;
    op2 = 1'h0;
    op2_temp = 1'h0;
    
    case (M_state_q)
      STATEINIT_state: begin
        if (submit[1+0-:1] == 1'h1 & submit[0+0-:1] == 1'h1) begin
          M_state_d = RANDA_state;
        end else begin
          M_state_d = STATEINIT_state;
        end
      end
      RANDA_state: begin
        a_temp = M_random_num;
        if (a_temp > 4'h9) begin
          a_actl = a_temp - 4'ha;
          a = a_actl;
        end
        M_random_next = 1'h1;
        M_state_d = RANDOP1_state;
      end
      RANDOP1_state: begin
        op1_temp = M_random_num;
        M_random_next = 2'h2;
        if (op1_temp == 2'h3) begin
          M_state_d = RANDB3_state;
        end else begin
          if (op1_temp == 2'h2) begin
            M_state_d = RANDB2_state;
          end else begin
            if (op1_temp == 1'h1) begin
              M_state_d = RANDB1_state;
            end else begin
              M_state_d = RANDB0_state;
            end
          end
        end
      end
      RANDB0_state: begin
        b_temp = M_random_num;
        M_random_next = 2'h3;
        if (b_temp >= 4'ha - a_actl) begin
          b_actl = b_temp - (4'ha - a_actl);
          b = b_actl;
        end
        M_state_d = RANDOP20_state;
      end
      RANDB1_state: begin
        b_temp = M_random_num;
        M_random_next = 2'h3;
        if (b_temp > 4'h9) begin
          b_temp = b_temp - 4'ha;
        end
        if (b_temp < a_actl) begin
          b_actl = b_temp + a_actl;
        end
        M_state_d = RANDOP21_state;
      end
      RANDB2_state: begin
        b_temp = M_random_num;
        M_random_next = 2'h3;
        if (b_temp > 4'h9) begin
          b_temp = b_temp - 4'ha;
        end
        if (b_temp > (4'ha / a_actl)) begin
          b_actl = b_temp - (4'ha / a_actl);
        end
        M_state_d = RANDOP22_state;
      end
      RANDB3_state: begin
        b_temp = M_random_num;
        M_random_next = 2'h3;
        if (b_temp > 4'h9) begin
          b_temp = b_temp - 4'ha;
        end
        M_modulo1_a = a_actl / b_actl;
        M_modulo1_b = 1'h1;
        if (M_modulo1_out != 1'h0) begin
          M_state_d = RANDB3_state;
        end else begin
          M_state_d = RANDOP23_state;
        end
      end
      RANDOP20_state: begin
        op2_temp = M_random_num;
        M_random_next = 1'h1;
        if (op2_temp == 2'h3) begin
          M_state_d = RANDC3_state;
        end else begin
          if (op2_temp == 2'h2) begin
            M_state_d = RANDC2_state;
          end else begin
            if (op2_temp == 1'h1) begin
              M_state_d = RANDC1_state;
            end else begin
              M_state_d = RANDC0_state;
            end
          end
        end
      end
      RANDOP20_state: begin
        op2_temp = M_random_num;
        M_random_next = 1'h1;
        if (op2_temp == 2'h3) begin
          M_state_d = RANDC7_state;
        end else begin
          if (op2_temp == 2'h2) begin
            M_state_d = RANDC6_state;
          end else begin
            if (op2_temp == 1'h1) begin
              M_state_d = RANDC5_state;
            end else begin
              M_state_d = RANDC4_state;
            end
          end
        end
      end
      RANDOP20_state: begin
        op2_temp = M_random_num;
        M_random_next = 1'h1;
        if (op2_temp == 2'h3) begin
          M_state_d = RANDCB_state;
        end else begin
          if (op2_temp == 2'h2) begin
            M_state_d = RANDCA_state;
          end else begin
            if (op2_temp == 1'h1) begin
              M_state_d = RANDC9_state;
            end else begin
              M_state_d = RANDC8_state;
            end
          end
        end
      end
      RANDOP20_state: begin
        op2_temp = M_random_num;
        M_random_next = 1'h1;
        if (op2_temp == 2'h3) begin
          M_state_d = RANDCF_state;
        end else begin
          if (op2_temp == 2'h2) begin
            M_state_d = RANDCE_state;
          end else begin
            if (op2_temp == 1'h1) begin
              M_state_d = RANDCD_state;
            end else begin
              M_state_d = RANDCC_state;
            end
          end
        end
      end
      RANDC0_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= 4'ha - b_actl - a_actl) begin
            c_actl = c_temp - (4'ha - b_actl - a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= 4'ha - b_actl - a_actl) begin
            c_actl = c_temp - (4'ha - b_actl - a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD0_state;
      end
      RANDC1_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= b_actl + a_actl) begin
            c_actl = c_temp - (b_actl + a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= b_actl + a_actl) begin
            c_actl = c_temp - (b_actl + a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD1_state;
      end
      RANDC2_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= (4'ha - a_actl) / b_actl) begin
            c_actl = c_temp - ((4'ha - a_actl) / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= (4'ha - a_actl) / b_actl) begin
            c_actl = c_temp - ((4'ha - a_actl) / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD2_state;
      end
      RANDC3_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end else begin
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end
        M_random_next = 3'h4;
        if (M_modulo1_out != 1'h0) begin
          M_state_d = RANDC3_state;
        end else begin
          M_state_d = CALCD3_state;
        end
      end
      RANDC4_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= 4'ha - b_actl + a_actl) begin
            c_actl = c_temp - (4'ha - b_actl + a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= 4'ha - b_actl + a_actl) begin
            c_actl = c_temp - (4'ha - b_actl + a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD4_state;
      end
      RANDC5_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp <= a_actl - b_actl) begin
            c_actl = c_temp + (a_actl - b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp <= a_actl - b_actl) begin
            c_actl = c_temp + (a_actl - b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD5_state;
      end
      RANDC6_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= (a_actl / b_actl)) begin
            c_actl = c_temp - (a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= (a_actl / b_actl)) begin
            c_actl = c_temp - (a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD6_state;
      end
      RANDC7_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end else begin
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end
        M_random_next = 3'h4;
        if (M_modulo1_out != 1'h0) begin
          M_state_d = RANDC7_state;
        end else begin
          M_state_d = CALCD7_state;
        end
      end
      RANDC8_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= 4'ha - b_actl * a_actl) begin
            c_actl = c_temp - (4'ha - b_actl * a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= 4'ha - b_actl * a_actl) begin
            c_actl = c_temp - (4'ha - b_actl * a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD8_state;
      end
      RANDC9_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp <= a_actl * b_actl) begin
            c_actl = c_temp + (a_actl * b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp <= a_actl * b_actl) begin
            c_actl = c_temp + (a_actl * b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCD9_state;
      end
      RANDCA_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= (4'ha / a_actl / b_actl)) begin
            c_actl = c_temp - (4'ha / a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= (4'ha / a_actl / b_actl)) begin
            c_actl = c_temp - (4'ha / a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCDA_state;
      end
      RANDCB_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end else begin
          M_modulo1_a = b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end
        M_random_next = 3'h4;
        if (M_modulo1_out != 1'h0) begin
          M_state_d = RANDCB_state;
        end else begin
          M_state_d = CALCDB_state;
        end
      end
      RANDCC_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= 4'ha - b_actl / a_actl) begin
            c_actl = c_temp - (4'ha - b_actl / a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= 4'ha - b_actl / a_actl) begin
            c_actl = c_temp - (4'ha - b_actl / a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCDC_state;
      end
      RANDCD_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= a_actl / b_actl) begin
            c_actl = c_temp - (a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= a_actl / b_actl) begin
            c_actl = c_temp - (a_actl / b_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCDD_state;
      end
      RANDCE_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          if (c_temp >= (4'ha * b_actl / a_actl)) begin
            c_actl = c_temp - (4'ha * b_actl / a_actl);
          end else begin
            c_actl = c_temp;
          end
        end else begin
          if (c_temp >= (4'ha * b_actl / a_actl)) begin
            c_actl = c_temp - (4'ha * b_actl / a_actl);
          end else begin
            c_actl = c_temp;
          end
        end
        M_random_next = 3'h4;
        M_state_d = CALCDA_state;
      end
      RANDCF_state: begin
        c_temp = M_random_num;
        if (c_temp > 4'h9) begin
          c_temp = c_temp - 4'ha;
          M_modulo1_a = a_actl / b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end else begin
          M_modulo1_a = a_actl / b_actl / c_actl;
          M_modulo1_b = 1'h1;
        end
        M_random_next = 3'h4;
        if (M_modulo1_out != 1'h0) begin
          M_state_d = RANDCF_state;
        end else begin
          M_state_d = CALCD3_state;
        end
      end
      CALCD0_state: begin
        d_actl = a_actl + b_actl + c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD1_state: begin
        d_actl = a_actl + b_actl - c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD2_state: begin
        d_actl = a_actl + b_actl * c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD3_state: begin
        d_actl = a_actl + b_actl / c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD4_state: begin
        d_actl = a_actl - b_actl + c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD5_state: begin
        d_actl = a_actl - b_actl - c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD6_state: begin
        d_actl = a_actl - b_actl * c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD7_state: begin
        d_actl = a_actl - b_actl / c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD8_state: begin
        d_actl = a_actl * b_actl + c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCD9_state: begin
        d_actl = a_actl * b_actl - c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDA_state: begin
        d_actl = a_actl * b_actl * c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDB_state: begin
        d_actl = a_actl * b_actl / c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDC_state: begin
        d_actl = a_actl / b_actl + c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDD_state: begin
        d_actl = a_actl / b_actl - c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDE_state: begin
        d_actl = a_actl / b_actl * c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CALCDF_state: begin
        d_actl = a_actl / b_actl / c_actl;
        M_state_d = CHECKDOVER_state;
      end
      CHECKDOVER_state: begin
        if (d_actl > 4'h9) begin
          error = 1'h1;
        end
        M_state_d = CHECKDUNDER_state;
      end
      CHECKDUNDER_state: begin
        if (d_actl < 1'h0) begin
          error = 1'h1;
        end
        M_state_d = RANDHIDE_state;
      end
      RANDHIDE_state: begin
        hide_temp = M_random_num;
        M_random_next = 1'h1;
        if (hide_temp == 1'h0) begin
          correct_answer = a_actl;
          M_sega_values = 16'h0007;
          if (b_actl == 1'h0) begin
            M_segb_values = 16'h0000;
          end else begin
            if (b_actl == 1'h1) begin
              M_segb_values = 16'h0001;
            end else begin
              if (b_actl == 2'h2) begin
                M_segb_values = 16'h0002;
              end else begin
                if (b_actl == 2'h3) begin
                  M_segb_values = 16'h0003;
                end else begin
                  if (b_actl == 3'h4) begin
                    M_segb_values = 16'h0004;
                  end else begin
                    if (b_actl == 3'h5) begin
                      M_segb_values = 16'h0005;
                    end else begin
                      if (b_actl == 3'h6) begin
                        M_segb_values = 16'h0006;
                      end else begin
                        if (b_actl == 3'h7) begin
                          M_segb_values = 16'h0007;
                        end else begin
                          if (b_actl == 4'h8) begin
                            M_segb_values = 16'h0008;
                          end else begin
                            M_segb_values = 16'h0009;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if (c_actl == 1'h0) begin
            M_segb_values = 16'h0000;
          end else begin
            if (c_actl == 1'h1) begin
              M_segc_values = 16'h0001;
            end else begin
              if (c_actl == 2'h2) begin
                M_segc_values = 16'h0002;
              end else begin
                if (c_actl == 2'h3) begin
                  M_segc_values = 16'h0003;
                end else begin
                  if (c_actl == 3'h4) begin
                    M_segc_values = 16'h0004;
                  end else begin
                    if (c_actl == 3'h5) begin
                      M_segc_values = 16'h0005;
                    end else begin
                      if (c_actl == 3'h6) begin
                        M_segc_values = 16'h0006;
                      end else begin
                        if (c_actl == 3'h7) begin
                          M_segc_values = 16'h0007;
                        end else begin
                          if (c_actl == 4'h8) begin
                            M_segc_values = 16'h0008;
                          end else begin
                            M_segb_values = 16'h0009;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if (d_actl == 1'h0) begin
            M_segd_values = 16'h0000;
          end else begin
            if (d_actl == 1'h1) begin
              M_segd_values = 16'h0001;
            end else begin
              if (d_actl == 2'h2) begin
                M_segd_values = 16'h0002;
              end else begin
                if (d_actl == 2'h3) begin
                  M_segd_values = 16'h0003;
                end else begin
                  if (d_actl == 3'h4) begin
                    M_segd_values = 16'h0004;
                  end else begin
                    if (d_actl == 3'h5) begin
                      M_segd_values = 16'h0005;
                    end else begin
                      if (d_actl == 3'h6) begin
                        M_segd_values = 16'h0006;
                      end else begin
                        if (d_actl == 3'h7) begin
                          M_segd_values = 16'h0007;
                        end else begin
                          if (d_actl == 4'h8) begin
                            M_segd_values = 16'h0008;
                          end else begin
                            M_segd_values = 16'h0009;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end else begin
          if (hide_temp == 1'h1) begin
            correct_answer = b_actl;
            M_sega_values = 16'h0007;
            if (a_actl == 1'h0) begin
              M_segb_values = 16'h0000;
            end else begin
              if (a_actl == 1'h1) begin
                M_sega_values = 16'h0001;
              end else begin
                if (a_actl == 2'h2) begin
                  M_sega_values = 16'h0002;
                end else begin
                  if (a_actl == 2'h3) begin
                    M_sega_values = 16'h0003;
                  end else begin
                    if (a_actl == 3'h4) begin
                      M_sega_values = 16'h0004;
                    end else begin
                      if (a_actl == 3'h5) begin
                        M_sega_values = 16'h0005;
                      end else begin
                        if (a_actl == 3'h6) begin
                          M_sega_values = 16'h0006;
                        end else begin
                          if (a_actl == 3'h7) begin
                            M_sega_values = 16'h0007;
                          end else begin
                            if (a_actl == 4'h8) begin
                              M_sega_values = 16'h0008;
                            end else begin
                              M_sega_values = 16'h0009;
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if (c_actl == 1'h0) begin
              M_segb_values = 16'h0000;
            end else begin
              if (c_actl == 1'h1) begin
                M_segc_values = 16'h0001;
              end else begin
                if (c_actl == 2'h2) begin
                  M_segc_values = 16'h0002;
                end else begin
                  if (c_actl == 2'h3) begin
                    M_segc_values = 16'h0003;
                  end else begin
                    if (c_actl == 3'h4) begin
                      M_segc_values = 16'h0004;
                    end else begin
                      if (c_actl == 3'h5) begin
                        M_segc_values = 16'h0005;
                      end else begin
                        if (c_actl == 3'h6) begin
                          M_segc_values = 16'h0006;
                        end else begin
                          if (c_actl == 3'h7) begin
                            M_segc_values = 16'h0007;
                          end else begin
                            if (c_actl == 4'h8) begin
                              M_segc_values = 16'h0008;
                            end else begin
                              M_segb_values = 16'h0009;
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if (d_actl == 1'h0) begin
              M_segd_values = 16'h0000;
            end else begin
              if (d_actl == 1'h1) begin
                M_segd_values = 16'h0001;
              end else begin
                if (d_actl == 2'h2) begin
                  M_segd_values = 16'h0002;
                end else begin
                  if (d_actl == 2'h3) begin
                    M_segd_values = 16'h0003;
                  end else begin
                    if (d_actl == 3'h4) begin
                      M_segd_values = 16'h0004;
                    end else begin
                      if (d_actl == 3'h5) begin
                        M_segd_values = 16'h0005;
                      end else begin
                        if (d_actl == 3'h6) begin
                          M_segd_values = 16'h0006;
                        end else begin
                          if (d_actl == 3'h7) begin
                            M_segd_values = 16'h0007;
                          end else begin
                            if (d_actl == 4'h8) begin
                              M_segd_values = 16'h0008;
                            end else begin
                              M_segd_values = 16'h0009;
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end else begin
            if (hide_temp == 2'h2) begin
              correct_answer = c_actl;
              M_segc_values = 16'h0007;
              if (a_actl == 1'h0) begin
                M_segb_values = 16'h0000;
              end else begin
                if (a_actl == 1'h1) begin
                  M_sega_values = 16'h0001;
                end else begin
                  if (a_actl == 2'h2) begin
                    M_sega_values = 16'h0002;
                  end else begin
                    if (a_actl == 2'h3) begin
                      M_sega_values = 16'h0003;
                    end else begin
                      if (a_actl == 3'h4) begin
                        M_sega_values = 16'h0004;
                      end else begin
                        if (a_actl == 3'h5) begin
                          M_sega_values = 16'h0005;
                        end else begin
                          if (a_actl == 3'h6) begin
                            M_sega_values = 16'h0006;
                          end else begin
                            if (a_actl == 3'h7) begin
                              M_sega_values = 16'h0007;
                            end else begin
                              if (a_actl == 4'h8) begin
                                M_sega_values = 16'h0008;
                              end else begin
                                M_sega_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if (b_actl == 1'h0) begin
                M_segb_values = 16'h0000;
              end else begin
                if (b_actl == 1'h1) begin
                  M_segb_values = 16'h0001;
                end else begin
                  if (b_actl == 2'h2) begin
                    M_segb_values = 16'h0002;
                  end else begin
                    if (b_actl == 2'h3) begin
                      M_segb_values = 16'h0003;
                    end else begin
                      if (b_actl == 3'h4) begin
                        M_segb_values = 16'h0004;
                      end else begin
                        if (b_actl == 3'h5) begin
                          M_segb_values = 16'h0005;
                        end else begin
                          if (b_actl == 3'h6) begin
                            M_segb_values = 16'h0006;
                          end else begin
                            if (b_actl == 3'h7) begin
                              M_segb_values = 16'h0007;
                            end else begin
                              if (b_actl == 4'h8) begin
                                M_segb_values = 16'h0008;
                              end else begin
                                M_segb_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if (d_actl == 1'h0) begin
                M_segd_values = 16'h0000;
              end else begin
                if (d_actl == 1'h1) begin
                  M_segd_values = 16'h0001;
                end else begin
                  if (d_actl == 2'h2) begin
                    M_segd_values = 16'h0002;
                  end else begin
                    if (d_actl == 2'h3) begin
                      M_segd_values = 16'h0003;
                    end else begin
                      if (d_actl == 3'h4) begin
                        M_segd_values = 16'h0004;
                      end else begin
                        if (d_actl == 3'h5) begin
                          M_segd_values = 16'h0005;
                        end else begin
                          if (d_actl == 3'h6) begin
                            M_segd_values = 16'h0006;
                          end else begin
                            if (d_actl == 3'h7) begin
                              M_segd_values = 16'h0007;
                            end else begin
                              if (d_actl == 4'h8) begin
                                M_segd_values = 16'h0008;
                              end else begin
                                M_segd_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end else begin
              correct_answer = d_actl;
              M_segd_values = 16'h0007;
              if (a_actl == 1'h0) begin
                M_segb_values = 16'h0000;
              end else begin
                if (a_actl == 1'h1) begin
                  M_sega_values = 16'h0001;
                end else begin
                  if (a_actl == 2'h2) begin
                    M_sega_values = 16'h0002;
                  end else begin
                    if (a_actl == 2'h3) begin
                      M_sega_values = 16'h0003;
                    end else begin
                      if (a_actl == 3'h4) begin
                        M_sega_values = 16'h0004;
                      end else begin
                        if (a_actl == 3'h5) begin
                          M_sega_values = 16'h0005;
                        end else begin
                          if (a_actl == 3'h6) begin
                            M_sega_values = 16'h0006;
                          end else begin
                            if (a_actl == 3'h7) begin
                              M_sega_values = 16'h0007;
                            end else begin
                              if (a_actl == 4'h8) begin
                                M_sega_values = 16'h0008;
                              end else begin
                                M_sega_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if (b_actl == 1'h0) begin
                M_segb_values = 16'h0000;
              end else begin
                if (b_actl == 1'h1) begin
                  M_segb_values = 16'h0001;
                end else begin
                  if (b_actl == 2'h2) begin
                    M_segb_values = 16'h0002;
                  end else begin
                    if (b_actl == 2'h3) begin
                      M_segb_values = 16'h0003;
                    end else begin
                      if (b_actl == 3'h4) begin
                        M_segb_values = 16'h0004;
                      end else begin
                        if (b_actl == 3'h5) begin
                          M_segb_values = 16'h0005;
                        end else begin
                          if (b_actl == 3'h6) begin
                            M_segb_values = 16'h0006;
                          end else begin
                            if (b_actl == 3'h7) begin
                              M_segb_values = 16'h0007;
                            end else begin
                              if (b_actl == 4'h8) begin
                                M_segb_values = 16'h0008;
                              end else begin
                                M_segb_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if (c_actl == 1'h0) begin
                M_segd_values = 16'h0000;
              end else begin
                if (c_actl == 1'h1) begin
                  M_segc_values = 16'h0001;
                end else begin
                  if (c_actl == 2'h2) begin
                    M_segc_values = 16'h0002;
                  end else begin
                    if (c_actl == 2'h3) begin
                      M_segc_values = 16'h0003;
                    end else begin
                      if (c_actl == 3'h4) begin
                        M_segc_values = 16'h0004;
                      end else begin
                        if (c_actl == 3'h5) begin
                          M_segc_values = 16'h0005;
                        end else begin
                          if (c_actl == 3'h6) begin
                            M_segc_values = 16'h0006;
                          end else begin
                            if (c_actl == 3'h7) begin
                              M_segc_values = 16'h0007;
                            end else begin
                              if (c_actl == 4'h8) begin
                                M_segc_values = 16'h0008;
                              end else begin
                                M_segc_values = 16'h0009;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      STATEINPUT_state: begin
        if (ans_input1 == 1'h0) begin
          M_seg_values = 16'h0000;
        end
        if (ans_input1 == 1'h1) begin
          M_seg_values = 16'h1111;
        end
        if (ans_input1 == 2'h2) begin
          M_seg_values = 16'h2222;
        end
        if (ans_input1 == 2'h3) begin
          M_seg_values = 16'h3333;
        end
        if (ans_input1 == 3'h4) begin
          M_seg_values = 16'h4444;
        end
        if (ans_input1 == 3'h5) begin
          M_seg_values = 16'h5555;
        end
        if (ans_input1 == 3'h6) begin
          M_seg_values = 16'h6666;
        end
        if (ans_input1 == 3'h7) begin
          M_seg_values = 16'h6666;
        end
        if (ans_input1 == 4'h8) begin
          M_seg_values = 16'h6666;
        end
        if (ans_input1 == 4'h9) begin
          M_seg_values = 16'h6666;
        end
        if (ans_input2 == 1'h0) begin
          M_seg2_values = 16'h0000;
        end
        if (ans_input2 == 1'h1) begin
          M_seg2_values = 16'h1111;
        end
        if (ans_input2 == 2'h2) begin
          M_seg2_values = 16'h2222;
        end
        if (ans_input2 == 2'h3) begin
          M_seg2_values = 16'h3333;
        end
        if (ans_input2 == 3'h4) begin
          M_seg2_values = 16'h4444;
        end
        if (ans_input2 == 3'h5) begin
          M_seg2_values = 16'h5555;
        end
        if (ans_input2 == 3'h6) begin
          M_seg2_values = 16'h6666;
        end
        if (ans_input2 == 3'h7) begin
          M_seg2_values = 16'h6666;
        end
        if (ans_input2 == 4'h8) begin
          M_seg2_values = 16'h6666;
        end
        if (ans_input2 == 4'h9) begin
          M_seg2_values = 16'h6666;
        end
        if (button[0+0-:1] == 1'h1) begin
          M_state_d = STATEP1UP_state;
        end
        if (button[1+0-:1] == 1'h1) begin
          M_state_d = STATEP2UP_state;
        end
        if (button[2+0-:1] == 1'h1) begin
          M_state_d = STATEP1DOWN_state;
        end
        if (button[3+0-:1] == 1'h1) begin
          M_state_d = STATEP2DOWN_state;
        end
        if (submit[0+0-:1] == 1'h1) begin
          
        end
        if (submit[1+0-:1] == 1'h1) begin
          
        end
      end
      STATEP1UP_state: begin
        if (ans_input1 == 4'h9) begin
          ans_input1 = 1'h0;
          M_state_d = STATEINPUT_state;
        end else begin
          ans_input1 = ans_input1 + 1'h1;
          M_state_d = STATEINPUT_state;
        end
      end
      STATEP1DOWN_state: begin
        if (ans_input1 == 1'h0) begin
          ans_input1 = 4'h9;
          M_state_d = STATEINPUT_state;
        end else begin
          ans_input1 = ans_input1 - 1'h1;
          M_state_d = STATEINPUT_state;
        end
      end
      STATEP2UP_state: begin
        if (ans_input2 == 1'h0) begin
          ans_input2 = 4'h9;
          M_state_d = STATEINPUT_state;
        end else begin
          ans_input2 = ans_input1 + 1'h1;
          M_state_d = STATEINPUT_state;
        end
      end
      STATEP2DOWN_state: begin
        if (ans_input2 == 1'h0) begin
          ans_input2 = 4'h9;
          M_state_d = STATEINPUT_state;
        end else begin
          ans_input2 = ans_input1 - 1'h1;
          M_state_d = STATEINPUT_state;
        end
      end
      STATEP1CORRECT_state: begin
        correct1 = 1'h1;
        M_state_d = STATEOUTPUT_state;
      end
      STATEP2CORRECT_state: begin
        correct2 = 1'h1;
        M_state_d = STATEOUTPUT_state;
      end
      STATEC_state: begin
        if (correct_answer == ans_input1) begin
          M_state_d = STATEHP_A_state;
        end else begin
          if (correct_answer == ans_input2) begin
            M_state_d = STATEHP_B_state;
          end
        end
      end
      STATEHP_A_state: begin
        if (correct1 == 1'h1) begin
          if (M_health_a_q[4+0-:1] == 1'h1) begin
            M_health_a_d[4+0-:1] = 1'h0;
          end else begin
            if (M_health_a_q[4+0-:1] == 1'h0) begin
              if (M_health_a_q[3+0-:1] == 1'h1) begin
                M_health_a_d[3+0-:1] = 1'h0;
              end else begin
                if (M_health_a_q[3+0-:1] == 1'h0) begin
                  if (M_health_a_q[2+0-:1] == 1'h1) begin
                    M_health_a_d[2+0-:1] = 1'h0;
                  end else begin
                    if (M_health_a_q[2+0-:1] == 1'h0) begin
                      if (M_health_a_q[1+0-:1] == 1'h1) begin
                        M_health_a_d[1+0-:1] = 1'h0;
                      end else begin
                        if (M_health_a_q[1+0-:1] == 1'h0) begin
                          if (M_health_a_q[0+0-:1] == 1'h1) begin
                            M_health_a_d[0+0-:1] = 1'h0;
                            M_state_d = STATEGAMEOVER_state;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end else begin
          if (correct_answer != ans_input2) begin
            M_state_d = STATEINIT_state;
          end
        end
      end
      STATEHP_B_state: begin
        if (correct2 == 1'h1) begin
          if (M_health_b_q[4+0-:1] == 1'h1) begin
            M_health_b_d[4+0-:1] = 1'h0;
          end else begin
            if (M_health_b_q[4+0-:1] == 1'h0) begin
              if (M_health_b_q[3+0-:1] == 1'h1) begin
                M_health_b_d[3+0-:1] = 1'h0;
              end else begin
                if (M_health_b_q[3+0-:1] == 1'h0) begin
                  if (M_health_b_q[2+0-:1] == 1'h1) begin
                    M_health_b_d[2+0-:1] = 1'h0;
                  end else begin
                    if (M_health_b_q[2+0-:1] == 1'h0) begin
                      if (M_health_b_q[1+0-:1] == 1'h1) begin
                        M_health_b_d[1+0-:1] = 1'h0;
                      end else begin
                        if (M_health_b_q[1+0-:1] == 1'h0) begin
                          if (M_health_b_q[0+0-:1] == 1'h1) begin
                            M_health_b_d[0+0-:1] = 1'h0;
                            M_state_d = STATEGAMEOVER_state;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end else begin
          if (correct_answer != ans_input2) begin
            M_state_d = STATEINIT_state;
          end
        end
      end
      STATEGAMEOVER_state: begin
        M_seg_values = 16'h0000;
        M_seg2_values = 16'h0000;
        if (submit[0+0-:1] == 1'h1 && submit[1+0-:1] == 1'h1) begin
          M_state_d = STATEGAMESTART_state;
        end
      end
      STATEGAMESTART_state: begin
        M_seg_values = 16'h0000;
        M_seg2_values = 16'h0000;
        M_health_a_d = 5'h1f;
        M_health_b_d = 5'h1f;
        if (submit[0+0-:1] == 1'h1 && submit[1+0-:1] == 1'h1) begin
          M_state_d = STATEINIT_state;
        end
      end
    endcase
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_seed_q <= M_seed_d;
    M_inp_a_q <= M_inp_a_d;
    M_inp_b_q <= M_inp_b_d;
    M_counter_q <= M_counter_d;
    M_next_state_q <= M_next_state_d;
    M_health_a_q <= M_health_a_d;
    M_health_b_q <= M_health_b_d;
  end
  
endmodule
