/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip,
    input [4:0] io_button
  );
  
  
  
  reg rst;
  reg [15:0] a;
  reg [15:0] b;
  reg [15:0] in;
  reg [5:0] alufn;
  
  wire [16-1:0] M_shifter_out;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shifter_1 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  wire [16-1:0] M_boolean_out;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn;
  boolean_2 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn(M_boolean_alufn),
    .out(M_boolean_out)
  );
  
  wire [16-1:0] M_comparator_out;
  reg [16-1:0] M_comparator_a;
  reg [16-1:0] M_comparator_b;
  reg [6-1:0] M_comparator_alufn;
  comparator_3 comparator (
    .a(M_comparator_a),
    .b(M_comparator_b),
    .alufn(M_comparator_alufn),
    .out(M_comparator_out)
  );
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder_4 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_6 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam STATE0_state = 2'd0;
  localparam STATEA_state = 2'd1;
  localparam STATEB_state = 2'd2;
  localparam STATEOUT_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = STATE0_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    usb_tx = usb_rx;
    in[0+7-:8] = io_dip[0+0+7-:8];
    in[8+7-:8] = io_dip[8+0+7-:8];
    alufn[0+5-:6] = io_dip[16+0+5-:6];
    a[0+15-:16] = 1'h0;
    b[0+15-:16] = 1'h0;
    alufn[0+5-:6] = 1'h0;
    M_shifter_a[0+15-:16] = a[0+15-:16];
    M_shifter_b[0+15-:16] = b[0+15-:16];
    M_shifter_alufn[0+5-:6] = alufn[0+5-:6];
    M_boolean_a[0+15-:16] = a[0+15-:16];
    M_boolean_b[0+15-:16] = b[0+15-:16];
    M_boolean_alufn[0+5-:6] = alufn[0+5-:6];
    M_comparator_a[0+15-:16] = a[0+15-:16];
    M_comparator_b[0+15-:16] = b[0+15-:16];
    M_comparator_alufn[0+5-:6] = alufn[0+5-:6];
    M_adder_a[0+15-:16] = a[0+15-:16];
    M_adder_b[0+15-:16] = b[0+15-:16];
    M_adder_alufn[0+5-:6] = alufn[0+5-:6];
    
    case (M_state_q)
      STATE0_state: begin
        M_state_d = STATEA_state;
      end
      STATEA_state: begin
        a[0+15-:16] = in[0+15-:16];
        M_state_d = STATEB_state;
      end
      STATEB_state: begin
        b[0+15-:16] = in[0+15-:16];
        M_state_d = STATEOUT_state;
      end
      STATEOUT_state: begin
        M_state_d = STATE0_state;
      end
    endcase
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
