module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input io_button[5]
  ) {
  
  sig rst,a[16],b[16],alufn[6];                  // reset signal
  alu alu;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    

    
    .rst(rst){
      multi_seven_seg seg;
    }
  }

  counter slowclock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  fsm state(.clk(slowclock.value),.rst(rst)) = {STATE0,STATEA, STATEB,STATEOUT};

  
  
  always {

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
     
    seg.values = {8h0,8h0,8h0,8h0}; //initiate seven segment display
     
    io_seg = ~seg.seg;      // connect segments to the driver
    io_sel = ~seg.sel;      // connect digit select to the driver
     
    usb_tx = usb_rx;        // echo the serial data
    
    
    io_led[2][5:0] = io_dip[2][5:0];  // show ALUFN on led
    a=0;
    b=0;
    alufn=0;
    alu.a = a;                        
    alu.b = b;
    alu.alufn = alufn;
    
    
    case (state.q) {
      state.STATE0:
      seg.values = {4h17,4h17,4h17,4h17};
      if (io_button[0] == 1) { //UP BUTTON TO CHANGE STATE
        state.d = state.STATEA;
      }
        
      state.STATEA:
        seg.values = {8h26,8h26,8h26,8h1}; //show ---A on seven_seg
        io_led[1][7:0] = io_dip[1];      //read input using led 
        io_led[0][7:0] = io_dip[0];
        a = c{io_dip[1][7:0], io_dip[0][7:0]}; //concatenate values from io_dip to input
        if (io_button[2] == 1) {  //DOWN BUTTON TO CHANGE STATE
        state.d = state.STATEB;
      } else if (io_button[4] ==1){  //RIGHT BUTTON TO RESET
          state.d = state.STATE0;
      }
        
      state.STATEB:
        seg.values = {8h26,8h26,8h26,8h2};  //show ---B on seven_seg
        io_led[1][7:0] = io_dip[1];   
        io_led[0][7:0] = io_dip[0];
        b = c{io_dip[1][7:0], io_dip[0][7:0]};
        alu.alufn = io_dip[2][5:0];
        if (io_button[1] == 1) {  //after center button is pressed, alu will be processed 
        state.d = state.STATEOUT;
        } else if (io_button[4]==1){
            state.d = state.STATE0;
        }

        
      state.STATEOUT:
        //code goes here
        alu.alufn = io_dip[2][5:0]; //taking dip value as ALUFN 
        alu.a = a; //reading input values
        alu.b = b;
        
        seg.values = {8h26,8h16,8h15,8h14}; //show -OUt on seven_seg
        io_led[1] = alu.out[15:8];       // write output on led
        io_led[0] = alu.out[7:0];
        
        if (io_button[3] == 1) {
          state.d = state.STATE0;
          }
        
        
    }
    }
}